<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>codinghjy&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-01T01:29:16.848Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>codinghjy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>原生AJAX实现搜索框智能提示</title>
    <link href="http://yoursite.com/2017/03/31/AJAX/"/>
    <id>http://yoursite.com/2017/03/31/AJAX/</id>
    <published>2017-03-31T12:12:18.000Z</published>
    <updated>2017-04-01T01:29:16.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直以来，使用 JQuery 来实现 AJAX 请求，感觉有必要了解一下原生 JS 实现方式。</p>
<a id="more"></a>
<h2 id="AJAX介绍"><a href="#AJAX介绍" class="headerlink" title="AJAX介绍"></a>AJAX介绍</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>AJAX即“Asynchronous JavaScript and XML”（异步的JavaScript与XML技术），指的是一套综合了多项技术的浏览器端网页开发技术。</p>
</blockquote>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote>
<p>使用Ajax的最大优点，就是能在不更新整个页面的前提下维护数据。这使得Web应用程序更为迅捷地回应用户动作，并避免了在网络上发送那些没有改变的信息。</p>
</blockquote>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><blockquote>
<p>它破坏浏览器的后退与加入收藏书签功能。</p>
</blockquote>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><blockquote>
<p>HTML5之前的一种方式是使用URL片断标识符（通常被称为锚点，即URL中#后面的部分）来保持追踪，允许用户回到指定的某个应用程序状态。（许多浏览器允许JavaScript动态更新锚点，这使得Ajax应用程序能够在更新显示内容的同时更新锚点。）</p>
</blockquote>
<p>HTML5 以后可以直接操作浏览历史，并以字符串形式存储网页状态，将网页加入网页收藏夹或书签时状态会被隐形地保留。</p>
<h3 id="Js通用代码"><a href="#Js通用代码" class="headerlink" title="Js通用代码"></a>Js通用代码</h3><p>跨浏览器的通用方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xmlHttp;<span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</div><div class="line">  xmlHttp = <span class="keyword">new</span> XMLHttpRequest();&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</div><div class="line">  <span class="keyword">var</span> aVersions = [<span class="string">"Msxml2.XMLHttp.5.0"</span>, <span class="string">"Msxml2.XMLHttp.4.0"</span>, <span class="string">"Msxml2.XMLHttp.3.0"</span>, <span class="string">"Msxml2.XMLHttp"</span>, <span class="string">"Microsoft.XMLHttp"</span>];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aVersions.length; i++) &#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">  xmlHttp = <span class="keyword">new</span> ActiveXObject(aVersions[i]);</div><div class="line">  <span class="keyword">break</span>;</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</div><div class="line">  &#125;&#125;</div></pre></td></tr></table></figure></p>
<h2 id="本项目介绍"><a href="#本项目介绍" class="headerlink" title="本项目介绍"></a>本项目介绍</h2><ol>
<li>搜索框智能提示的应用场景</li>
<li>掌握搜索框智能提示的原理</li>
<li>自己动手开发搜索框智能提示的功能  </li>
</ol>
<p>值得关注的点：原生 js 获取 xmlHttp 对象，前后台交互方法</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>搜索框，模糊搜索等<br><img src="/images/ajax_search.png" alt="应用场景图片"></p>
<h3 id="理论分析"><a href="#理论分析" class="headerlink" title="理论分析"></a>理论分析</h3><ol>
<li>在搜索框输入关键字</li>
<li>浏览器将关键字「异步」发送给服务器</li>
<li>服务器经过处理。将相应数据以 Json 格式返回客户端</li>
<li>浏览器接受服务器响应数据，解析之后使用 js 操作 dom 显示数据。</li>
</ol>
<p>图片解析流程<br><img src="/images/ajax_pro.png" alt="流程"></p>
<p>重点一：数据交互采用 ajax 方式<br>重点二：javascript 解析数据动态展示</p>
<h3 id="项目核心源码"><a href="#项目核心源码" class="headerlink" title="项目核心源码"></a>项目核心源码</h3><p>分享与 Github 的 <a href="https://github.com/HelloWorld521/Java" target="_blank" rel="external">ServletAjax</a> 项目</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一直以来，使用 JQuery 来实现 AJAX 请求，感觉有必要了解一下原生 JS 实现方式。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>专题一：IOC ---- Spring入门笔记</title>
    <link href="http://yoursite.com/2017/03/27/Spring%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/03/27/Spring入门/</id>
    <published>2017-03-26T17:35:53.000Z</published>
    <updated>2017-03-26T18:21:25.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="专题一-IOC"><a href="#专题一-IOC" class="headerlink" title="专题一 IOC"></a>专题一 IOC</h2><ol>
<li>接口及面向接口编程</li>
<li>什么是 IOC（控制反转）：控制权转移，应用程序本身不负责</li>
<li>Spring的 Bean 配置</li>
<li>Bean 的初始化</li>
<li>Spring 的常用注入方式</li>
</ol>
<a id="more"></a>
<h3 id="接口及面向接口编程"><a href="#接口及面向接口编程" class="headerlink" title="接口及面向接口编程"></a>接口及面向接口编程</h3><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><ul>
<li>接口即声明，声明哪些方法对外提供。</li>
<li>使用接口沟通，使其能被修改内部而不影响外部其他实体的与其交互的方式（Java8中接口可以拥有方法体）</li>
</ul>
<h4 id="面向接口编程"><a href="#面向接口编程" class="headerlink" title="面向接口编程"></a>面向接口编程</h4><ul>
<li>结构设计中，分清层次及调用关系，每层只向外（上层）提供一组功能的接口，各层仅依赖接口而非实现类</li>
<li>接口内部的实现变动不影响各层之间的调用，这一点在公共服务中尤为重要</li>
<li>“面向接口编程”中的“接口”是用于【隐藏具体的实现】和【实现多态性的组件】（2点）</li>
</ul>
<h3 id="什么是IOC"><a href="#什么是IOC" class="headerlink" title="什么是IOC"></a>什么是IOC</h3><ul>
<li>IOC：控制反转，控制权的转移，应用程序本身不负责依赖对象的创建和维护，而是由外部容器负责创建和维护</li>
<li>DI（依赖注入）是其一种实现方式。（获取依赖对象的过程被反转，过程由自身管理变为有 IOC 容器主动注入，即依赖注入）</li>
<li>目的：创建对象并且组装对象之间的关系</li>
</ul>
<p>下图为 Spring 官网给出的 IOC 说明<br><img src="/images/ioc.png" alt="IOC说明"></p>
<h3 id="Spring-的-Bean-配置"><a href="#Spring-的-Bean-配置" class="headerlink" title="Spring 的 Bean 配置"></a>Spring 的 Bean 配置</h3><p>配置一般存放于 spring-ioc.xml 文件中<br>举例<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">  http://www.springframework.org/schema/beans/spring-beans.xsd" &gt;</div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"oneInterface"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.interfaces.OneInterfaceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Bean-容器的初始化"><a href="#Bean-容器的初始化" class="headerlink" title="Bean 容器的初始化"></a>Bean 容器的初始化</h3><ul>
<li>基础：两个包<ul>
<li>org.springframework.beans</li>
<li>org.springframework.context</li>
<li>BeanFactory 提供配置结构和基本功能，加载并初始化Bean</li>
<li>ApplicationContext 保存了 Bean 对象并在 Spring 中广泛使用</li>
</ul>
</li>
</ul>
<ul>
<li><p>3中初始化方式：ApplicationContext</p>
<ul>
<li><p>本地文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FileSystemXmlApplicationContext context = <span class="keyword">new</span></div><div class="line">FileSystemXmlApplicationContext(<span class="string">"F:/workspace/appcontext.xml"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>Classpath</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ClassPathXmlApplicationContext context = <span class="keyword">new</span></div><div class="line">ClassPathXmlApplicationContext(<span class="string">"classpath:spring-context.xml"</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>Web 应用中依赖 servlet 或 Listener<br><img src="/images/web.png" alt="Web初始化"></p>
</li>
</ul>
</li>
</ul>
<h3 id="Spring-注入"><a href="#Spring-注入" class="headerlink" title="Spring 注入"></a>Spring 注入</h3><ul>
<li>Spring 注入指在启动Spring容器加载bean配置的时候，完成对变量的赋值行为</li>
<li>常用的两种注入方式<ul>
<li>设值注入</li>
<li>构造注入  </li>
</ul>
</li>
</ul>
<h4 id="设值注入"><a href="#设值注入" class="headerlink" title="设值注入"></a>设值注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">  http://www.springframework.org/schema/beans/spring-beans.xsd" &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"injectionService"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.injection.service.InjectionServiceImpl"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"injectionDAO"</span> <span class="attr">ref</span>=<span class="string">"injectionDAO"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"injectionDAO"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.injection.dao.InjectionDAOImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意：需要在 Service 文件中添加 setInjectionDAO 方法。property 中 name 对应 set*</p>
<h4 id="构造注入"><a href="#构造注入" class="headerlink" title="构造注入"></a>构造注入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">  http://www.springframework.org/schema/beans/spring-beans.xsd" &gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"injectionService"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.injection.service.InjectionServiceImpl"</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"injectionDAO"</span> <span class="attr">ref</span>=<span class="string">"injectionDAO"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"injectionDAO"</span> <span class="attr">class</span>=<span class="string">"com.imooc.ioc.injection.dao.InjectionDAOImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意：需要在 Service 文件中添加构造方法。name 对应 service 中构造器参数名</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;专题一-IOC&quot;&gt;&lt;a href=&quot;#专题一-IOC&quot; class=&quot;headerlink&quot; title=&quot;专题一 IOC&quot;&gt;&lt;/a&gt;专题一 IOC&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;接口及面向接口编程&lt;/li&gt;
&lt;li&gt;什么是 IOC（控制反转）：控制权转移，应用程序本身不负责&lt;/li&gt;
&lt;li&gt;Spring的 Bean 配置&lt;/li&gt;
&lt;li&gt;Bean 的初始化&lt;/li&gt;
&lt;li&gt;Spring 的常用注入方式&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Spring学习笔记" scheme="http://yoursite.com/categories/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Java练习项目分享</title>
    <link href="http://yoursite.com/2017/03/26/Java%E7%BB%83%E4%B9%A0%E9%A1%B9%E7%9B%AE%E5%88%86%E4%BA%AB/"/>
    <id>http://yoursite.com/2017/03/26/Java练习项目分享/</id>
    <published>2017-03-25T17:58:43.000Z</published>
    <updated>2017-03-26T08:07:14.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p>一味的学习只会使人感觉枯燥和无聊，在学习Java的过程中，我们总需要一些Java练习案例去检验自己的学习成果，这里给大家分享一些我自己的Java练习项目。</p>
<p><img src="/images/java.png" alt=""></p>
<a id="more"></a>
<h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><p>本项目是个人的一些java项目练习源码，分享给大家，希望可以和大家一起进步！</p>
<h2 id="Java项目实例"><a href="#Java项目实例" class="headerlink" title="Java项目实例"></a>Java项目实例</h2><ul>
<li><p><a href="https://github.com/HelloWorld521/Java/tree/master/woss" target="_blank" rel="external">Woss2.0  电信采集系统</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">适合java完全入门者练习，涉及到接口，xml解析，log4j应用。</div><div class="line">难度： 一般</div><div class="line">需要知识: IO流 多线程 网络编程 jdbc</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/HelloWorld521/Java/tree/master/tomcatServer3.0" target="_blank" rel="external">tomcatServlet3.0  Web服务器</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">模拟tomcat服务器，帮助了解http协议</div><div class="line">难度： 易</div><div class="line">需要知识： 多线程 网络编程</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/HelloWorld521/Java/tree/master/checkcode" target="_blank" rel="external">checkcode Java制作验证码</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">慕课教程Java制作验证码，不想看视频的可以看看</div><div class="line">难度：易</div><div class="line">需要知识： jsp/servlet 基础</div></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/HelloWorld521/Java/tree/master/IMOOCSpider/" target="_blank" rel="external">IMOOCSpider 简易网络爬虫</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">爬取慕课猿问问题</div><div class="line">难度：易</div><div class="line">需要知识：java基础语法，正则表达式</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>所有项目源码分享在github上，查看源码请点击——<a href="https://github.com/HelloWorld521/Java" target="_blank" rel="external">这里</a><br>Please feel free to contact us with any questions you may have.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h1&gt;&lt;p&gt;一味的学习只会使人感觉枯燥和无聊，在学习Java的过程中，我们总需要一些Java练习案例去检验自己的学习成果，这里给大家分享一些我自己的Java练习项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/java.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java实例" scheme="http://yoursite.com/categories/Java%E5%AE%9E%E4%BE%8B/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java网络爬虫项目</title>
    <link href="http://yoursite.com/2017/03/19/java%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2017/03/19/java网络爬虫项目/</id>
    <published>2017-03-19T14:02:19.000Z</published>
    <updated>2017-03-26T08:21:30.263Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>talk is cheap, show me the code;</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/4988302-d58683605cb9efd4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="spider.jpg"></p>
<a id="more"></a>
<h3 id="什么是网络爬虫？"><a href="#什么是网络爬虫？" class="headerlink" title="什么是网络爬虫？"></a>什么是网络爬虫？</h3><h4 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h4><blockquote>
<p><strong><a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E7%88%AC%E8%9F%B2" target="_blank" rel="external">网络爬虫</a></strong>（英语：<strong>web crawler</strong>），也叫网络蜘蛛（spider），是一种用来自动浏览万维网的网络机器人。其目的一般为编纂网络索引。</p>
</blockquote>
<h4 id="百度百科"><a href="#百度百科" class="headerlink" title="百度百科"></a>百度百科</h4><blockquote>
<p><strong>网络爬虫</strong>（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。</p>
</blockquote>
<h3 id="java网络爬虫练习项目"><a href="#java网络爬虫练习项目" class="headerlink" title="java网络爬虫练习项目"></a>java网络爬虫练习项目</h3><p>一个比较简单的java练习项目。</p>
<h4 id="需要知识"><a href="#需要知识" class="headerlink" title="需要知识"></a>需要知识</h4><ul>
<li>什么是网络爬虫</li>
<li>Java基础</li>
<li>正则表达式</li>
</ul>
<h4 id="项目思路"><a href="#项目思路" class="headerlink" title="项目思路"></a>项目思路</h4><p>在<a href="http://www.imooc.com/wenda" target="_blank" rel="external">慕课网</a>的猿问页面，寻找一个你喜欢的问题页面，利用http请求获取问题页面的源码，然后通过正则表达式，不断爬取相关问题页面。</p>
<h4 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h4><p>该项目存在三个类<br><code>Imooc.java :</code> <code>imooc问题bean类</code><br><code>Spider.java:</code> <code>封装用来爬取页面的方法类</code><br><code>Main.java:</code> <code>运行起始页面</code></p>
<ul>
<li>Imooc.java类是要爬取内容的对象类，属性成员有问题，问题链接，问题描述，答案列表和下一个问题链接。</li>
<li>Spider.java类封装了2个可能用到的方法，getSource方法获取网页源代码和getImoocPage获取页面Url列表。</li>
</ul>
<h4 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h4><p>IMOOCSpider项目已上传到我的github上—-<a href="https://github.com/HelloWorld521/Java.git" target="_blank" rel="external">传送门</a><br>欢迎Star</p>
<p>下载下来后导入eclipse即可运行。</p>
<h4 id="项目运行结果"><a href="#项目运行结果" class="headerlink" title="项目运行结果"></a>项目运行结果</h4><p><img src="http://upload-images.jianshu.io/upload_images/4988302-cbcfa93400ac8dad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h3 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h3><p><a href="http://codingxiaxw.cn/2016/10/20/20-%E7%94%A8Java%E5%86%99%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%E4%B8%80%E4%B9%8B%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/" target="_blank" rel="external">java爬取知乎问题</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;talk is cheap, show me the code;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4988302-d58683605cb9efd4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;spider.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java实例" scheme="http://yoursite.com/categories/Java%E5%AE%9E%E4%BE%8B/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JAVA随机生成验证码（一）</title>
    <link href="http://yoursite.com/2017/03/08/JAVA%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2017/03/08/JAVA随机生成验证码（一）/</id>
    <published>2017-03-08T15:26:09.000Z</published>
    <updated>2017-03-26T08:20:57.001Z</updated>
    
    <content type="html"><![CDATA[<p><strong><font color="green">图片验证码原理：</font></strong> 服务器生成包含随机字符的字符串图片发给客户端，客户端提交数据需要填写字符串作为验证。而字符串保存在图片中，机器难以识别，达到防止有人利用程序恶意发送信息的目的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4988302-c064a5895599aa1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<a id="more"></a>
<h5 id="JAVA随机生成图片"><a href="#JAVA随机生成图片" class="headerlink" title="JAVA随机生成图片"></a>JAVA随机生成图片</h5><p>JAVA随机生成图片步骤如下：</p>
<ol>
<li><p>创建图片缓存区     传参为宽高和图片类型</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BufferedImage bi = <span class="keyword">new</span></div><div class="line">BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</div></pre></td></tr></table></figure>
</li>
<li><p>获取画笔并绘画</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Graphics g = bi.getGraphics();  <span class="comment">//获取画笔</span></div><div class="line">g.setFont(<span class="keyword">new</span> Font(Font.SANS_SERIF,Font.BOLD,<span class="number">16</span>));<span class="comment">//设置字体</span></div><div class="line">g.setColor(color);<span class="comment">//设置画笔颜色</span></div><div class="line">g.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);   <span class="comment">//绘制背景</span></div></pre></td></tr></table></figure>
</li>
<li><p>输出图片</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ImageIO.write(bi, <span class="string">"JPG"</span>, resp.getOutputStream());</div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="JAVA实现验证码实例"><a href="#JAVA实现验证码实例" class="headerlink" title="JAVA实现验证码实例"></a>JAVA实现验证码实例</h5><h6 id="servlet生成验证码图片源码"><a href="#servlet生成验证码图片源码" class="headerlink" title="servlet生成验证码图片源码"></a>servlet生成验证码图片源码</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.javaweb.respones;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.awt.Color;</div><div class="line"><span class="keyword">import</span> java.awt.Font;</div><div class="line"><span class="keyword">import</span> java.awt.Graphics;</div><div class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</div><div class="line"><span class="keyword">import</span> javax.servlet.ServletException;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdentityServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//	设置字符</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">char</span>[] chars=<span class="string">"1234567890QWERTYUIOPASDFGHJKLZXCVBNM"</span>.toCharArray();</div><div class="line"></div><div class="line"><span class="comment">//	设置随机数</span></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</div><div class="line"></div><div class="line"><span class="comment">//	获取4位随机数</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRandomString</span><span class="params">()</span></span>&#123;</div><div class="line">		StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</div><div class="line">		<span class="keyword">int</span> index;   <span class="comment">//获取随机chars下标</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</div><div class="line">			index = random.nextInt(chars.length);  <span class="comment">//获取随机chars下标</span></div><div class="line">			buffer.append(chars[index]);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> buffer.toString();</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="comment">//	获取随机颜色</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Color <span class="title">getRandomColor</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Color(random.nextInt(<span class="number">255</span>),random.nextInt(<span class="number">255</span>),random.nextInt(<span class="number">255</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="comment">//	返回某颜色的反色</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Color <span class="title">getReverseColor</span><span class="params">(Color c)</span></span>&#123;</div><div class="line"><span class="comment">//		防止反色和原色相近</span></div><div class="line">		<span class="keyword">if</span>(c.getRed()&lt;<span class="number">130</span>&amp;&amp;c.getRed()&gt;<span class="number">125</span> &amp;&amp; c.getBlue()&lt;<span class="number">130</span>&amp;&amp; c.getBlue()&gt;<span class="number">125</span> &amp;&amp;</div><div class="line">				c.getGreen()&lt;<span class="number">130</span>&amp;&amp;c.getGreen()&gt;<span class="number">125</span>)&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Color(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>);</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Color(<span class="number">255</span>-c.getRed(),<span class="number">255</span>-c.getGreen(),<span class="number">255</span>-c.getBlue());</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">		String code = getRandomString();  <span class="comment">//获取随机验证码</span></div><div class="line">		req.getSession().setAttribute(<span class="string">"code"</span>, code); <span class="comment">//放入Session</span></div><div class="line"></div><div class="line">		<span class="keyword">int</span> width = <span class="number">100</span>;    <span class="comment">//图片宽度</span></div><div class="line">		<span class="keyword">int</span> height = <span class="number">30</span>;  	<span class="comment">//图片高度</span></div><div class="line"></div><div class="line">		Color color = 	getRandomColor();  <span class="comment">//随机色，用于背景色</span></div><div class="line">		Color reverse = getReverseColor(color);  <span class="comment">//反色，用于前景色</span></div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 生成带字符串的文本图片</div><div class="line">		 */</div><div class="line"><span class="comment">//		1.创建图片缓存区     传参为宽高和图片类型</span></div><div class="line">		BufferedImage bi = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</div><div class="line"><span class="comment">//		2.获取画笔并绘画</span></div><div class="line">		Graphics g = bi.getGraphics();</div><div class="line">		g.setFont(<span class="keyword">new</span> Font(Font.SANS_SERIF,Font.BOLD,<span class="number">16</span>));<span class="comment">//设置字体</span></div><div class="line">		g.setColor(color);<span class="comment">//设置画笔颜色</span></div><div class="line">		g.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);   <span class="comment">//绘制背景</span></div><div class="line">		g.setColor(reverse);   <span class="comment">//设置画笔颜色</span></div><div class="line">		g.drawString(code, <span class="number">18</span>, <span class="number">20</span>); <span class="comment">//绘制字符</span></div><div class="line"><span class="comment">//		设置最多100个噪音点</span></div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,n = random.nextInt(<span class="number">100</span>);i&lt;n;i++)&#123;</div><div class="line">			g.drawRect(random.nextInt(width), random.nextInt(height), <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line"><span class="comment">//		3.输出图片</span></div><div class="line">		ImageIO.write(bi, <span class="string">"JPG"</span>, resp.getOutputStream());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成图片验证码主要应用随机数生成器Random生成随机颜色绘制背景，取反色*绘制字符,并绘制最多100随机位置的噪音点，增加识别难度。</p>
<h6 id="配置XML"><a href="#配置XML" class="headerlink" title="配置XML"></a>配置XML</h6><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>IdentityServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.javaweb.respones.IdentityServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>IdentityServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/IdentityServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<h6 id="html展示页面"><a href="#html展示页面" class="headerlink" title="html展示页面"></a>html展示页面</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">reloadImage</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).disable=<span class="literal">true</span>;</div><div class="line">		<span class="built_in">document</span>.getElementById(<span class="string">'identity'</span>).src=<span class="string">'servlet/IdentityServlet?time='</span></div><div class="line">		 	+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime();		</div><div class="line">	&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">"servlet/IdentityServlet"</span> <span class="attr">id</span>=<span class="string">"identity"</span> <span class="attr">onload</span>=<span class="string">"btn.disabled= false;"</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"换个图片"</span> <span class="attr">onclick</span>=<span class="string">"reloadImage()"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h6 id="截图展示"><a href="#截图展示" class="headerlink" title="截图展示"></a>截图展示</h6><p><img src="http://upload-images.jianshu.io/upload_images/4988302-21e98def5708e9d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/4988302-295963b3855fa442.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/4988302-9a363045f30be011.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>下篇介绍利用组件Jcaptcha和Kaptcha生成验证码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;图片验证码原理：&lt;/font&gt;&lt;/strong&gt; 服务器生成包含随机字符的字符串图片发给客户端，客户端提交数据需要填写字符串作为验证。而字符串保存在图片中，机器难以识别，达到防止有人利用程序恶意发送信息的目的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4988302-c064a5895599aa1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java实例" scheme="http://yoursite.com/categories/Java%E5%AE%9E%E4%BE%8B/"/>
    
    
      <category term="Javaweb" scheme="http://yoursite.com/tags/Javaweb/"/>
    
  </entry>
  
  <entry>
    <title>现代浏览器之争</title>
    <link href="http://yoursite.com/2017/03/03/%E7%8E%B0%E4%BB%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B9%8B%E4%BA%89/"/>
    <id>http://yoursite.com/2017/03/03/现代浏览器之争/</id>
    <published>2017-03-03T10:04:49.000Z</published>
    <updated>2017-03-08T15:29:01.849Z</updated>
    
    <content type="html"><![CDATA[<p>今天学习javaweb，发现一件很有趣的事情……</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4988302-2f8c118e1dfe1b54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<a id="more"></a>
<p>用浏览器访问servlet项目，当代码执行到这地方时<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *</div><div class="line"> * 返回客户端浏览器信息</div><div class="line"> */</div><div class="line">private String getNavigator(String userAgent)&#123;</div><div class="line">	if(userAgent.indexOf(&quot;TencentTraveler&quot;) &gt; 0)</div><div class="line">		return &quot;腾讯浏览器&quot;;</div><div class="line">	if(userAgent.indexOf(&quot;Safari&quot;)&gt;0)</div><div class="line">		return &quot;Safari浏览器&quot;;</div><div class="line">	if(userAgent.indexOf(&quot;Chrome&quot;)&gt;0)</div><div class="line">		return &quot;Chrome浏览器&quot;;</div><div class="line">	if(userAgent.indexOf(&quot;Firefox&quot;)&gt;0)</div><div class="line">		return &quot;Firxfox浏览器&quot;;</div><div class="line">	if(userAgent.indexOf(&quot;MSIE&quot;)&gt;0)</div><div class="line">		return &quot;IE浏览器&quot;;</div><div class="line">	return &quot;未知浏览器&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用谷歌浏览器访问，居然辨识出错</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4988302-c376adf39a48dec2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>打开调试器，发现谷歌的userAgent竟然有这么多的浏览器标识,这是什么情况！！！<br>谷歌在伪装别人么…</p>
<p>查阅各方资料，终于找到答案：</p>
<h4 id="为什么所有浏览器的userAgent都带Mozilla"><a href="#为什么所有浏览器的userAgent都带Mozilla" class="headerlink" title="为什么所有浏览器的userAgent都带Mozilla"></a><a href="http://www.eamonning.com/blog/view/289" target="_blank" rel="external">为什么所有浏览器的userAgent都带Mozilla</a></h4><p>　　最早的时候有一个浏览器叫NCSA Mosaic，把自己标称为NCSA_Mosaic/2.0 (Windows 3.1)，它支持文字显示的同时还支持图片，于是Web开始好玩起来。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4988302-b67c9f1be64c4898.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>　　然后出现了一个新的网页浏览器，“Mozilla”，其实就是“Mosaic终结者”的意思，这搞的Mosaic很不爽，（毕竟Mosaic出道早，江湖老），新浏览器最后正式公布的名称是Netscape，它把自己标称为Mozilla/1.0 (Win3.1)，更好玩了。Netscape支持框架显示，后来框架在大家中间流行起来了，但Mosaic不支持框架啊，于是伟大的“用户代-理人探测”技术出现了，如果是“Mozilla”，那就发给支持框架的页面，至于其他的浏览器，则发给不含框架的页面。</p>
<p>　　Netscape想逗Microsoft玩儿，把Windows叫做“几乎不曾做过调试的设备驱动器”，后者很恼火。Microsoft于是推出了自己的 网页浏览器，叫做Internet Explorer，希望它能成为“Netscape终结者”。Internet Explorer也支持框架，但它不是Mozilla啊，所以没人给它发送带有框架的页面。Microsoft慢慢烦躁起来，不再寄希望于网站管理员逐渐 认识IE并给它发框架，而是宣称自己是“兼容Mozilla”的，开始模仿Netscape，把自己标称为Mozilla/1.22 (compatible; MSIE 2.0; Windows 95)，这样Internet Explorer也能收到框架了，整个Microsoft狂喜，但网站管理员开始有点被搞糊涂了。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4988302-d16a4adde6a161b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>　　Microsoft把IE和Windows一起卖，并且把产品也弄得比Netscape更好了，拉开了第一场浏览器之战。结果和大家知道的一样，Netscape被干掉了，Microsoft大胜、大喜。但是后来Netscape以Mozilla的新名称重生了，构造了Gecko，标称其为Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.1) Gecko/20020826，Gecko属于渲染引擎，表现优异。Mozilla开发了Firefox，标称为Mozilla/5.0 (Windows; U; Windows NT 5.1; sv-SE; rv:1.7.5) Gecko/20041108 Firefox/1.0，并且Firefox表现也非常优秀。Gecko扩张迅速，一些浏览器使用了它的代码并标称为Mozilla/5.0 (Macintosh; U; PPC Mac OS X Mach-O; en-US; rv:1.7.2) Gecko/20040825 Camino/0.8.1 ，这是一个，还有Mozilla/5.0 (Windows; U; Windows NT 5.1; de; rv:1.8.1.8) Gecko/20071008 SeaMonkey/1.0，另一个，它们都伪装成Mozilla，同时也都是基于Gecko支持的。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4988302-05968a8af7dc8fa8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>　　Gecko表现优秀，IE则很差劲，于是身份甄别再次发生，输送给Gecko的是设计良好的网页代码，其他浏览器就没有这个待遇了。Linux的跟随者很伤心，因为他们创建了基于KHTML引擎支持的Konqueror，但却不会被输送好代码，虽然他们自己认为KHTML和Gecko一样优秀，于是Konquerer开始伪装自己“像Gecko”那样以得到好的网页，并标称自己为Mozilla/5.0 (compatible; Konqueror/3.2; FreeBSD) (KHTML, like Gecko)，这个世界更让人困惑了。</p>
<p>　　后来出现了Opera这样的主儿，宣称“允许用户自己决定让浏览器装成谁”，它的菜单中提供了Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.51， Mozilla/5.0 (Windows NT 6.0; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.51，Opera/9.51 (Windows NT 5.1; U; en) 供大家来选择，选谁是谁。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4988302-d42e6ca2d988b887.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>　　Apple开发了Safari，使用了KHTML，同时也增加了很多新特性，后来干脆一锅煮，另起炉灶叫了WebKit，但是它有希望能够得到那些为KHTML编写的网页，于是Safari标称自己为Mozilla/5.0 (Macintosh; U; PPC Mac OS X; de-de) AppleWebKit/85.7 (KHTML, like Gecko) Safari/85.5，这个世界更混乱了。</p>
<p>　　Microsoft越来越担心Firefox的发展，重新启动了Internet Explorer的开发，标称自己为Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0) ，可以很好的渲染代码，但那要看网站管理员是否指示它这么做。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/4988302-68f4e02946d38fa1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>　　Google也开发了自己的浏览器Chrome， 使用了Webkit，有点像Safari，希望能得到为Safari编写的网页，于是决定装成Safari。这样啊，Chrome使用了WebKit渲染 引擎，想装成Safari，而WebKit呢又伪装自己是KHTML，KHTML呢又是伪装成Gecko的，同时所有的浏览器又都宣称自己是 Mozilla，于是，Chrome宣称自己是Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13,，UserAgent字符串彻底混乱了，也几乎不再发挥任何作用，每个人都宣称自己是别人，混乱充斥人间啊。</p>
<p>　　有点调侃的味道，可以总结为一句话：Mozilla是Netscape的吉祥物，也是Netscape Navigator浏览器使用的内部开发代号。由于Netscape早期的影响力，直到今天，所有浏览器包括IE，向Web服务器报告自己的浏览器标识的 时候，都以 “Mozilla”开头，表明自己是Mozilla兼容的。这，就是原因啦。</p>
<p>　　查看浏览器标记的方法也很容易，通过JavaScript语句：</p>
<p>　　javascript:alert(navigator.userAgent)</p>
<p>　　在地址栏输入以上代码，然后回车。</p>
<p>答案内容转载：<br> <a href="http://www.eamonning.com/blog/view/289" target="_blank" rel="external">http://www.eamonning.com/blog/view/289</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天学习javaweb，发现一件很有趣的事情……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/4988302-2f8c118e1dfe1b54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="冷知识" scheme="http://yoursite.com/categories/%E5%86%B7%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="-浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://yoursite.com/2017/03/02/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/03/02/第一篇博客/</id>
    <published>2017-03-02T05:36:32.000Z</published>
    <updated>2017-03-26T08:06:36.173Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"><em>做人没有梦想，跟咸鱼有什么区别</em></blockquote>

<p><img src="/images/firstBlog.png" alt="Paste_Image.png"></p>
<a id="more"></a>
<h4 id="为什么写博客"><a href="#为什么写博客" class="headerlink" title="为什么写博客"></a>为什么写博客</h4><p>这个问题网上的答案数不胜数<br><em><a href="https://zhuanlan.zhihu.com/p/19743861?columnSlug=cnfeat" target="_blank" rel="external">为什么要写博客</a></em><br><em><a href="http://stormzhang.com/android/2016/03/04/why-i-keep-writing-blog/" target="_blank" rel="external">我为什么坚持写博客</a></em><br>对于个人而言</p>
<ol>
<li>记录自身成长过程是多么有意义的一件事。</li>
<li>网上资料数不胜数，内容参差不齐，遇到问题自己整理解决并记录下来，供自己今后学习，也方便他人查阅。</li>
<li>寻找志同道合的朋友</li>
<li><a href="http://www.15yan.com/topic/chuang-zuo-de-mi-mi/i0sBdlKnryf/?f=wx" target="_blank" rel="external">为了保持逼格，不要停止写作</a></li>
</ol>
<h4 id="现阶段"><a href="#现阶段" class="headerlink" title="现阶段"></a>现阶段</h4><p>现阶段奋战javaWeb开发</p>
<h4 id="个性签名"><a href="#个性签名" class="headerlink" title="个性签名"></a>个性签名</h4><p><em>talk is cheap, show me the code;</em></p>
<h4 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h4><p>最后，如果你想联系我，请点击以下链接：</p>
<p><a href="http://codinghjy.coding.me" target="_blank" rel="external">Blog@codinghjy</a></p>
<p><a href="https://github.com/HelloWorld521" target="_blank" rel="external">Github@codinghjy</a></p>
<p><a href="http://www.jianshu.com/u/98c02590617f" target="_blank" rel="external">jianshu@codinghjy</a></p>
<h4 id="再说两句"><a href="#再说两句" class="headerlink" title="再说两句"></a>再说两句</h4><p>如果你想搭建想我一样酷炫的Blog请点击这里—&gt;<a href="http://ookamiantd.top/2017/build-blog-hexo-base/" target="_blank" rel="external">传送门</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;em&gt;做人没有梦想，跟咸鱼有什么区别&lt;/em&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/images/firstBlog.png&quot; alt=&quot;Paste_Image.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="about me" scheme="http://yoursite.com/tags/about-me/"/>
    
  </entry>
  
</feed>
